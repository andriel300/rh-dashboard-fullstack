// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Employee {
    id              Int              @id @default(autoincrement())
    firstName       String
    lastName        String
    birthDate       DateTime
    hireDate        DateTime
    terminationDate DateTime?
    gender          Gender
    race            Race
    employmentType  EmploymentType
    position        Position
    state           String
    status          EmploymentStatus
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    Hiring          Hiring?
    Termination     Termination?
    State           State?           @relation(fields: [stateId], references: [id])
    stateId         Int?

    @@index([state])
    @@index([status])
    @@index([employmentType])
    @@index([position])
    @@index([race])
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Race {
    WHITE
    BLACK
    BROWN
    ASIAN
    INDIGENOUS
}

enum EmploymentType {
    CLT
    PJ
    INTERN
    TEMP
}

enum Position {
    ANALYST
    COORDINATOR
    MANAGER
    SUPERVISOR
    DIRECTOR
    EXECUTIVE
}

enum EmploymentStatus {
    ACTIVE
    INACTIVE
}

model Hiring {
    id         Int            @id @default(autoincrement())
    employeeId Int            @unique
    hireDate   DateTime
    hireType   EmploymentType
    position   Position
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt

    Employee Employee @relation(fields: [employeeId], references: [id])
}

model Termination {
    id              Int       @id @default(autoincrement())
    employeeId      Int       @unique
    terminationDate DateTime?
    reason          String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    Employee Employee @relation(fields: [employeeId], references: [id])
}

model State {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    employees Employee[]
}
